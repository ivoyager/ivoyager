# hud_orbit.gd
# This file is part of I, Voyager
# https://ivoyager.dev
# *****************************************************************************
# Copyright 2017-2022 Charlie Whitfield
# I, Voyager is a registered trademark of Charlie Whitfield in the US
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# *****************************************************************************
class_name IVHUDOrbit
extends MeshInstance

# Generated by IVHUDsBuilder.

var orbit: IVOrbit
var orbit_mesh := ArrayMesh.new()
var shader_material := ShaderMaterial.new()

var _times: Array = IVGlobal.times
# shader params
var _color: Color
var _reference_normal: Vector3
var _shape_elements: Vector2 # a, e
var _rotation_elements: Vector3 # i, Om, w


func change_color(color: Color) -> void:
	if color != _color:
		_color = color
		shader_material.set_shader_param("color", Vector3(color.r, color.g, color.b))


func draw_orbit(_dummy: bool) -> void:
	if _reference_normal != orbit.reference_normal:
		_reference_normal = orbit.reference_normal
		shader_material.set_shader_param("reference_normal", _reference_normal)
	var orbital_elements := orbit.get_elements(_times[0])
	var a: float = orbital_elements[0]
	var e: float = orbital_elements[1]
	var shape_elements := Vector2(a, e)
	if _shape_elements != shape_elements:
		_shape_elements = shape_elements
		shader_material.set_shader_param("shape", shape_elements)
		var apoapsis := a * (1.0 + e)
		var half_aabb := 3.0 * apoapsis * Vector3(1.0, 1.0, 1.0)
		orbit_mesh.custom_aabb = AABB(-half_aabb, 2.0 * half_aabb)
	var rotation_elements := Vector3(orbital_elements[2], orbital_elements[3],
			orbital_elements[4]) # i, Om, w
	if _rotation_elements != rotation_elements:
		_rotation_elements = rotation_elements
		shader_material.set_shader_param("rotation", rotation_elements)
